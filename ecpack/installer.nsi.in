%import os.path
; Generated by ecpack-nsis.
Unicode True
!define SRC_DIR "%os.path.abspath(self.prefix)%"

; Use the modern user interface.
!include "MUI2.nsh"
%if self.file_exists("_cpack/NSIS/install.ico"):
    !define MUI_ICON "${SRC_DIR}\_cpack\NSIS\install.ico"
    %if self.file_exists("_cpack/NSIS/uninstall.ico"):
        !define MUI_UNIICON "${SRC_DIR}\_cpack\NSIS\uninstall.ico"
    %end
%end

%if self.file_exists("_cpack/NSIS/install_header.bmp"):
    !define MUI_HEADERIMAGE
    !define MUI_HEADERIMAGE_BITMAP "${SRC_DIR}\_cpack\NSIS\install_header.bmp"
    %if self.file_exists("_cpack/NSIS/uninstall_header.bmp"):
        '!define MUI_HEADERIMAGE_UNBITMAP "${SRC_DIR}\_cpack\NSIS\uninstall_header.bmp"
    %end
%end

; General config.
Name "%self.display_name%"
!ifdef CREATE_UNINSTALLER
    OutFile "%self.create_uninstaller_exe_filename()%"
!else
    OutFile "%self.install_exe_filename()%"
!endif

InstallDir "$PROGRAMFILES64\%self.vendor%\%self.display_name%"
InstallDirRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "InstallLocation"

%if self.file_exists("_cpack/license.rtf"):
!insertmacro MUI_PAGE_LICENSE "${SRC_DIR}\_cpack\license.rtf"
%elif self.file_exists("_cpack/license.txt"):
!insertmacro MUI_PAGE_LICENSE "${SRC_DIR}\_cpack\license.txt"
%end

%if len(self.components) > 0:
!insertmacro MUI_PAGE_COMPONENTS
%end

!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

; Languages.
!insertmacro MUI_LANGUAGE "English"

%for component in self.components:
Section %self.section_name(component)%
    SetOutPath "$INSTDIR"
    File /r "%component.name%\*.*"
    WriteRegDWord HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "Component-%component.name%" 0x00000001
SectionEnd
%end

%for command in self.redist_install_commands():
Section "%os.path.splitext(os.path.basename(command.install_exe))[0]%"
    SetOutPath "$INSTDIR"
    File "_redist\%os.path.normcase(command.install_exe)%"

    ExecWait '"$INSTDIR\%os.path.normcase(command.install_exe)%" %command.options%' $0
  %for code in command.success_exit_codes:
    IntCmpU $0 %code% done 0 0
  %end

  %for code in command.reboot_exit_codes:
    IntCmpU $0 %code% 0 +3 +3
    SetRebootFlag true
    goto done
  %end

  %if command.fallback_options is not None:
    ExecWait '"$INSTDIR\%os.path.normcase(command.install_exe)%" %command.fallback_options%'
  %else:
    SetErrors
  %end

done:
    Delete "$INSTDIR\%os.path.normcase(command.install_exe)%"
SectionEnd
%end

Section "-Core"
    SetOutPath "$INSTDIR"
!ifndef CREATE_UNINSTALLER
    File "uninstall.exe"
!endif
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "DisplayName" "%self.display_name%"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "DisplayVersion" "%self.version%"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "Publisher" "%self.vendor%"
    WriteRegDword HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "VersionMinor" %hex(self.minor_version())%
    WriteRegDWord HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "VersionMajor" %hex(self.major_version())%
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "InstallLocation" "$INSTDIR"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "UninstallString" "$INSTDIR\uninstall.exe"
    WriteRegDWord HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "EstimatedSize" %hex(self.file_size() // 1024)%
    WriteRegDWord HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "NoModify" 0x1
    WriteRegDWord HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "NoRepair" 0x1
SectionEnd

; Recipe to uninstall the application
Section "Uninstall"
%for component in self.components:
    ; Uninstall %component.display_name%
    ReadRegDWord $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "Component-%component.name%"
    StrCmp "$0" "" skip_uninstall_%component.name%

    %for file_name in component.file_names:
        Delete "$INSTDIR\%os.path.normcase(file_name)%"
    %end
    %for directory_name in reversed(component.directory_names()):
        RMDir "$INSTDIR\%os.path.normcase(directory_name)%"
    %end

    DeleteRegValue HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "Component-%component.name%"
skip_uninstall_%component.name%:
%end

    Delete "$INSTDIR\uninstall.exe"
    RMDir "$INSTDIR"
    ; Try to remove the Vendor directory
    RMDir "$INSTDIR\.."
    DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%"
SectionEnd

; Write the uninstaller because we need to sign it.
; .inInit is ignored by the uninstall.exe
Function .onInit
!ifdef CREATE_UNINSTALLER
    WriteUninstaller "%self.uninstall_exe_filename()%"
    Quit
!else
    ReadRegStr $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "UninstallString"
    StrCmp "$0" "" install already_installed

already_installed:
    MessageBox MB_YESNOCANCEL|MB_ICONEXCLAMATION \
        "%self.display_name% is already installed. $\n$\nDo you want to uninstall the old version before installing the new one?" \
        /SD IDYES IDYES uninstall IDNO install
    Abort

uninstall:
    ClearErrors
    StrLen $2 "\uninstall.exe"
    ; remove "\uninstall.exe" from UninstallString to get path
    StrCpy $3 $0 -$2
    ; Do not copy the uninstaller to a temp file
    ExecWait '"$0" /S _?=$3'

    IfErrors uninstall_failed install

uninstall_failed:
    MessageBox MB_OK|MB_ICONSTOP "Uninstall failed."
    Abort

install:
!endif
FunctionEnd


Function .onInstSuccess
    IfRebootFlag 0 noreboot
    MessageBox MB_YESNO "A reboot is required to finish the installation. Do you wish to reboot now?" IDNO noreboot
    Reboot
noreboot:
FunctionEnd

Function un.onInit
    ReadRegStr $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\%self.display_name%" "InstallLocation"
    StrCmp "$0" "" not_installed installed

not_installed:
    MessageBox MB_OK "%self.display_name% is not installed."
    Abort

installed:
    StrCpy $INSTDIR "$0"
FunctionEnd

